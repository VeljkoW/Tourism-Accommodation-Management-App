<Window x:Class="BookingApp.View.Guest.Windows.RescheduleStatus"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BookingApp.View.Guest.Windows"
        xmlns:local1="clr-namespace:BookingApp.Domain.Model.Converters"
        mc:Ignorable="d"
        Title="RescheduleStatus" Height="450" Width="800" ResizeMode="NoResize" WindowStartupLocation="CenterScreen" >
    <Window.Resources>
        <local1:GuestIdToUsernameConverter x:Key="GuestIdToUsernameConverter"/>
        <local1:AccommodationIdToNameConverter x:Key="AccommodationIdToNameConverter"/>
        <local1:AccommodationIdToLocation x:Key="AccommodationIdToLocation"/>
        <local1:CommentIdToComment x:Key="CommentIdToComment"/>
        <local1:BoolIsAcceptedToStatus x:Key="BoolIsAcceptedToStatus"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#f4cc2e"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#f4cc2e"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#EFDE9F"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#EFDE9F"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#f4cc2e"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#f4cc2e"/>
        <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsFocused"  Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Focus">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background1" Color="#56736F"/>
        <SolidColorBrush x:Key="Button.Static.Border1" Color="#56736F"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background1" Color="#74877A"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border1" Color="#74877A"/>
        <SolidColorBrush x:Key="Button.Pressed.Background1" Color="#74877A"/>
        <SolidColorBrush x:Key="Button.Pressed.Border1" Color="#74877A"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background1}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border1}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="8" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background1}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border1}"/>
                            </Trigger>
                            <Trigger Property="IsFocused"  Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background1}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border1}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Background="#DDDDDD">
        <Grid.RowDefinitions>
            <RowDefinition Height="4*"/>
            <RowDefinition Height="4*"/>
        </Grid.RowDefinitions>
        <Label Grid.Row="0" Content="*Pending reschedule requests" Margin="30 8 0 0"></Label>
        <DataGrid Grid.Row="0" x:Name="WaitingReschedule" Margin="30"
          ItemsSource="{Binding guestReschedulingRequests, UpdateSourceTrigger=PropertyChanged}"
          AutoGenerateColumns="False"
          SelectionMode="Single" IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Width="*" Header="Accommodation" Binding="{Binding AccommodationId, Converter={StaticResource AccommodationIdToNameConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Location" Binding="{Binding AccommodationId, Converter={StaticResource AccommodationIdToLocation}, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Check In Date" Binding="{Binding CheckInDate, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Check Out Date" Binding="{Binding CheckOutDate, UpdateSourceTrigger=PropertyChanged}"/>
            </DataGrid.Columns>
        </DataGrid>
        <Label Grid.Row="1" Content="*Processed reschedule requests" Margin="30 8 0 0"></Label>
        <DataGrid Grid.Row="1" x:Name="DoneReschedule" Margin="30"
          ItemsSource="{Binding processedReschedulingRequests, UpdateSourceTrigger=PropertyChanged}"
          AutoGenerateColumns="False"
          SelectionMode="Single" IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTextColumn Width="*" Header="Accommodation" Binding="{Binding AccommodationId, Converter={StaticResource AccommodationIdToNameConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Location" Binding="{Binding AccommodationId, Converter={StaticResource AccommodationIdToLocation}, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Check In Date" Binding="{Binding CheckInDate, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Check Out Date" Binding="{Binding CheckOutDate, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Comment" Binding="{Binding CommentId, Converter={StaticResource CommentIdToComment}, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Width="*" Header="Status" Binding="{Binding IsAccepted, Converter={StaticResource BoolIsAcceptedToStatus}, UpdateSourceTrigger=PropertyChanged}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
